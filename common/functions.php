<?php

#=================================================================================
# “htmlspecialchars()”でエンティティ化したHTML特殊文字を
#	Flashで正常表示できるように全角に変換するファンクション
#=================================================================================
function h14s_han2zen(&$str)
{
    $str = str_replace("&amp;", "＆", $str);
    $str = str_replace("&quot;", "”", $str);
    $str = str_replace("&lt;", "＜", $str);
    $str = str_replace("&gt;", "＞", $str);
    $str = str_replace("&#39", "’", $str);
    $str = str_replace("'", "’", $str);
    $str = str_replace("&", "＆", $str);
    $str = str_replace("%", "%25", $str);
    $str = str_replace("+", "%2b", $str);

    return $str;
}

#=================================================================================
# 管理者情報テーブルよりメールアドレスを取得するファンクション
#	メソッド名：getInitData("カラム名")
#=================================================================================
function getInitData($colum = "")
{
    global $PDO;
    if (!$colum) {
        $colum = "EMAIL1";
    }
    $sql = "SELECT {$colum} FROM APP_INIT_DATA WHERE(RES_ID = '1')";
    $fetch = $PDO->fetch($sql);
    return $fetch[0][$colum];
}

#=================================================================================
# 管理情報テーブルよりIPリストを取得するファンクション
#	メソッド名：getPermitIPList("ID名")
#=================================================================================
function getPermitIPList($bo_id)
{
    global $PDO;
    if (!$bo_id || empty($bo_id)) {
        return false;
    }
    $sql = "SELECT PERMIT_IP_LST FROM APP_ID_PASS WHERE(BO_ID = '".utilLib::strRep($bo_id, 5)."')";
    $fetch = $PDO -> fetch($sql);
    return explode(",", $fetch[0]["PERMIT_IP_LST"]);
}

#=================================================================================
# 転送処理を行うファンクション（引数：対象URL、戻り値：なし）
#=================================================================================
function location($url)
{
    echo '<html><head><title></title></head>';
    echo '<body onLoad="Javascript:document.location.submit();">';
    echo '<form name="location" action="'.$url.'" method="post">';
    echo '</form></body></html>';
    echo '<noscript>header("Location: '.$url.'");</noscript>';
    exit();
}

#=================================================================================
# ＨＴＭＬタグの有効処理
#
# 【back_office/n○whatsnew/LGC_regist.php】でＨＴＭＬタグの有効処理の上に
# addslashesの処理を行っておりますが、こちらの処理でもaddslashesをおこなっております。
# 二重に処理を行わないよう注意をしてください。
# （二重に処理をしますとaddslashesが無効になります。）
#=================================================================================
function html_tag($str)
{
    $str = mb_convert_kana($str, "KV");//半角を全角に変換処理
    $str = strip_tags($str, "<span><p><a><b><i><strong><em><u><iframe><object><param><embed>");
    $str = utilLib::strRep($str, 7); // 前後の空白除去
    $str = utilLib::strRep($str, 4); // stripslashes
    $str = utilLib::strRep($str, 5); // addslashes

    return $str;
}
$layer_free = "Layer_free";//カラーボタンの付近にレイヤーを表示するレイヤー用

#=================================================================================
# 改行タグのHTML形式化　※通常のnl2brだとxhtml形式<br/>になってしまう為。
#=================================================================================

function nl2br2($str)
{
    return preg_replace('/(\r\n)|\n|\r/', "<br>", $str);
}

#=================================================================================
# ファイル検索システム
#

# 管理画面でjpag,gif,pngの３種類のファイルを登録できるようになったため
# 昔の様にjpagのみとは行かなくなったので、こちらの関数でファイルを取得して
# その配列データでファイルの削除と表示をさせる。
#=================================================================================

#=================================================================================
# ファイル検索表示システム
# 検索に該当したファイルを表示する
# 登録ファイル名の基本は【RES_ID.拡張子】の組み合わせなので
# 検索方法は【path/RES_ID.".".*】【path/RES_ID."_"$i.".".*】などで
# 拡張子をワイルドカードに表示が基本になる
# 基本的に不要な登録ファイルは削除するようにして該当するファイルは一つにすること
# こちらの表示処理は一番最初に該当するファイルを表示させる。
#
# $path ファイルが置いてある階層へのパス
# $con 表示対象のファイル条件
# $option 表示するのに必要な設定を記述（width="200" hegith="150" alt="img" style="margin:10px;" などimgタグに記述する内容）
# $size_lock
# 1 = 検索で該当したファイルの縦横サイズをimgタグに出力
# 2 = パスのみ表示
# デフォルト = サイズ固定なし
#
# １はN3などアンカーで、表示する時に画像読み込み中などの影響でアンカー位置がずれてしまうのを防ぐ
# サムネイル用など元の画像を小さくする場合にはフラグを立たせずに$optionで横幅を指定する
# ２はライトボックスなどで画像のパスを指定しないといけない箇所にパスを置く為
#=================================================================================
function search_file_disp($path, $con, $option = "", $size_lock = null)
{
    $disp_image = "";//表示する変数の初期化（表示する画像が無い場合もある為）

    //階層と条件が入っているか確認
    if ($path && $con) {
        $s_data = glob($path.$con);//検索結果を受け取る

        //検索結果に該当するファイルがあった場合
        //if(count($s_data)){//php 5.3.3だとうまく判定してくれない
        if (file_exists($s_data[0]) && !empty($s_data[0])) {
            if ($size_lock == 2) {//パスのみを表示
                $disp_image = $s_data[0];
            } elseif ($size_lock == 1) {//サイズ固定のフラグがたっている場合
                $size = getimagesize($s_data[0]);//画像サイズを取得
                $disp_image = "<img src=\"".$s_data[0]."?r=".rand()."\" width=\"".$size[0]."\" height=\"".$size[1]."\" ".$option.">";//検索に該当したファイル名を渡す。また、設定する記述も付け加える。
            } else {//固定なし
                $disp_image = "<img src=\"".$s_data[0]."?r=".rand()."\" ".$option.">";//検索に該当したファイル名を渡す。また、設定する記述も付け加える。
            }
        }
    }

    //データを返す
    return $disp_image;
}

#=================================================================================
# ファイル検索表示フラグシステム
#
# 検索に該当したファイルがあるかのチェックを行う
# 使用目的は管理画面での画像が登録しているかしていないかで分岐する
# 箇所の補助、返値はtrue（ファイル在り）とfalse（ファイルなし）で返答
#
# 例　登録している画像の削除ボタンの表示判定、複数画像があれば画像の切り替え判定
#
# $path		ファイルが置いてある階層へのパス
# $con		表示対象のファイル条件
#=================================================================================
function search_file_flg($path, $con)
{

    //階層と条件が入っているか確認
    if ($path && $con) {
        $s_data = glob($path.$con);//検索結果を受け取る

        //検索結果に該当するファイルがあった場合
        //if(count($s_data)){//php 5.3.3だとうまく判定してくれない
        if (file_exists($s_data[0]) && !empty($s_data[0])) {
            return true;
        }
    }

    //該当ファイルが無かった場合
    return false;
}

#=================================================================================
# ファイル検索削除システム
#
# 検索に該当したファイルを削除する
# 登録ファイル名の基本は【RES_ID.拡張子】の組み合わせなので
# 検索方法は【path/RES_ID.".".*】【path/RES_ID."_"$i.".".*】などで
# 拡張子をワイルドカードに削除が基本になる
#
# また、W3の様に拡張子だけが違うファイルも削除される為
# W3では【path/RES_ID."_f.".*】【path/RES_ID."_"$i."_f.".*】など画像登録とは
# 別のファイル名形式にさせる必要がある。
#
# $path		ファイルが置いてある階層へのパス
# $con		削除対象のファイル条件
#=================================================================================
function search_file_del($path, $con)
{

    //階層と条件が入っているか確認（ただし*のみの場合は処理しない全ファイルが削除される為）
    if ($path && $con && ($con != "*")) {

        //検索に引っかかったファイルを削除する
        if (glob($path.$con)) {//パスのデータがあるときのみ処理を行う
            foreach (glob($path.$con) as $filename) {
                if (($filename != "") && file_exists($filename)) {//ファイルが存在すれば削除処理を行う
                    unlink($filename) or die("ファイルの削除に失敗しました。");
                }
            }
        }
    }
}

#=================================================================================
# メール本文で自動的に改行を行う
#
# 「RFC5322」の「行の長さの制限」
# Emailにおいて1行（改行コードまで）の長さは、半角998文字を越えてはいけない
#
# この半角998文字を超えて入力をしてしまうユーザーを何とかするプログラム
# wordwrap を日本語用に改良した物、ただしUTF-8用に設定されている
# 他のエンコードの場合$cutの箇所を調整する必要がある可能性がある。
#
#
# 1行あたりの制限文字数（日本語を取り扱う前提） 39*2 = 78 Byte　でデフォルト39文字に設定
# （URLを入力とか長い物を入力は意識していない文字数を設定している）
#
# ここから引用
# http://ameblo.jp/itboy/entry-10018306820.html
#
# $body		メール本文を設定
# $part_length	カットする文字数を設定最大450にしておく
#=================================================================================
function mbody_auto_lf($body = "", $part_length=39)
{
    
    ///////////////////////////////////////////////////
    // 改行(一行)ごとにデータを取得する
    $line        = mb_split("\n", $body);//改行コードLFを目印に区切る
    $body_tmp    = null;//一時保存のメール本文
    $line_length = 0;//
        
    ///////////////////////////////////
    //一行ごと調べていく
    for ($i = 0; $i < count($line); $i++) {
        $line_length = strlen($line[$i]);//文字数を取得（全角半角関係なしに）
        $one_line    = null;// ASCII文字のみであれば、最大制限文字数の2倍の文字数までを許可する
        
        if ($line_length > ($part_length * 2)) {//バイト数でカットする文字数を超えていた場合
            
            $mb_length = mb_strlen($line[$i]);// 文字数を取得する。
            
            ////////////////////////////////////////////////
            //カットする文字数で割り切れる場合
            if (($mb_length % $part_length) == 0) {
                $loop_cnt = $mb_length / $part_length;//カット数を取得
                
            ////////////////////////////////////////////////
            //割り切れない場合
            } else {
                $loop_cnt = ceil(mb_strlen($line[$i]) / $part_length);//カット数を取得
            }
            
            $start_num = 0;
            
            ////////////////////////////////////////////////
            // 1行ごとに制限文字数内で分解して改行コードを挿入する
            for ($j = 1; $j <= $loop_cnt; $j++) {
                
                ////////////////////////////////////////////////
                // 制限文字数単位で改行コード挿入
                $one_line .= mb_substr($line[$i], $start_num, $part_length) . "\n";
                $start_num = $part_length * $j;
            }
        } else {//超えていなければそのまま渡す。
            $one_line = $line[$i] . "\n";
        }
        $body_tmp .= $one_line;
    }
        
    return $body_tmp;//結果を返す。
}

#=================================================================================
# 検索キーワードで入力データを全て全角に変換する処理
#
# 現在自社のデータベースの仕様ではMYSQLのLIKEでなど検索した場合
# 全角同士の大文字、小文字は区別せずにヒット
# 半角同士の大文字、小文字は区別せずにヒット
# ができるが、全角と半角では区別されてしまう為
# 検索の入力によっては検索に出てこない商品が出てしまうので
# 検索キーワードは全て全角に統一する
#
# この関数を使用するタイミングはデータベースに登録と表ページで
# キーワード検索で入力した文字に処理して、そのデータで検索させる
#
#=================================================================================

function key_word_con($str="")
{
    
    //タグの除去
    $str = strip_tags($str);

    //前後の空白除去
    $str = utilLib::strRep($str, 7);

    // stripslashes
    $str = utilLib::strRep($str, 4);

    //半角カタカナを全角カタカナに変換
    $str = mb_convert_kana($str, "KV");

    // 半角英数字、カタカナを全角に変換
    $str = mb_convert_kana($str, "AK", "UTF-8");

    // 小文字英字を全角英字に変換
    $str = mb_convert_case($str, MB_CASE_UPPER, "UTF-8");

    //エスケープ処理
    $str = addslashes($str);
    
    return $str;
}

#=================================================================================
# サイトのトップページURLを生成する
#
# 用途はショッピングのパスワード変更へのURL,静的化ページのbaseタグの設定
# など、誘導する為のパス生成の補助
#
# $type 出力タイプ　1は今現在のSSLページか判断してトップページのURLを出力　0はトップページまでのディレクトリ階層を返す。（先頭部分をhttpsを付けたり加工目的）
# $ht $typeが2の時に頭に付けれるパスの設定
#=================================================================================
function get_top_url($type=0, $ht="")
{
    $base_path = dirname(__FILE__)."/";//今現在の階層を取得する
    $base_path = str_replace($_SERVER['DOCUMENT_ROOT'], "", $base_path);//ドキュメントルート ディレクトリのパスを除去する
    
    ///////////////////////////////////////////////////////
    //A1お問い合わせ用,ショッピングのパスワード変更用（SSLとかの判断が必要なもの）
    if ($type==1) {
        $base_path = $_SERVER["HTTP_HOST"].$base_path;//頭にドメイン名をくっつける
        $url = empty($_SERVER["HTTPS"]) ? "http://".$base_path : "https://".$base_path;//SSLか判断してhttpをくっつける
            
    ///////////////////////////////////////////////////////
    //PHP側で使うパスを出力　ショッピングのメールテンプレート読み込みなど（スマホとかだと階層が違ってくるため）
    } elseif ($type==2) {
        $url = $_SERVER['DOCUMENT_ROOT'];
            
    ///////////////////////////////////////////////////////
    //加工用用　http,httpsを固定にする必要がある物など
    } else {
        $url = $base_path;
    }
    
    return $url;//結果を返す。
}
